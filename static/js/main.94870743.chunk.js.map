{"version":3,"sources":["utils/API.js","components/Navbar.js","utils/SearchContext.js","components/SearchBar.js","components/Footer.js","components/User.js","utils/UserContext.js","pages/UserList.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Navbar","class","href","SearchContext","createContext","SearchBar","useContext","setSearch","id","type","onChange","e","preventDefault","target","value","toLowerCase","for","Footer","User","first","last","username","phone","email","UserContext","UserList","users","useState","sorted","setSorted","search","userList","filter","user","name","includes","className","onClick","sort","a","b","map","i","key","login","App","setUsers","useEffect","API","then","res","data","results","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.94870743.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default {\n  getUsers: function () {\n    return axios.get(\"https://randomuser.me/api/?results=100&nat=us&inc=name,%20email,%20login,%20phone&seed=b1e242795bb97b37\");\n  },\n};\n","import React from \"react\";\n\nfunction Navbar() {\n  return (\n    <nav>\n      <div class=\"nav-wrapper\">\n        <a href=\"/\" class=\"brand-logo\">\n          User Directory\n        </a>\n        {/* <ul class=\"right hide-on-med-and-down\">\n        <li ><a class=\"search-toggle waves-effect\"><i class=\"material-icons\">search</i></a></li>\n      </ul> */}\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React, { createContext } from \"react\";\n\nexport const SearchContext = createContext();\n\nexport default SearchContext;","import React, { useContext } from \"react\";\nimport SearchContext from \"../utils/SearchContext\";\n\nfunction SearchBar() {\n  const [ search, setSearch ] = useContext(SearchContext);\n\n\n  const handleChange = e => {\n    e.preventDefault()\n    setSearch(e.target.value.toLowerCase());\n  };\n\n  return (\n    <div class=\"row search-bar\">\n      <form class=\"col s12\">\n        <div class=\"row\">\n          <div class=\"input-field col s12\">\n            <i class=\"material-icons prefix\">search</i>\n            <input id=\"icon_prefix\" type=\"text\" onChange={handleChange}/>\n            <label for=\"icon_prefix\">Search by name</label>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <footer class=\"page-footer\">\n      <div class=\"container\">\n        <p>Â© 2020 Garrett Gassensmith</p>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\n\nfunction User({first, last, username, phone, email }) {\n  return (\n    <tr>\n      <td>{first} {last}</td>\n      <td>{username}</td>\n      <td>{phone}</td>\n      <td>{email}</td>\n    </tr>\n  );\n}\n\nexport default User;\n","import React, { createContext } from \"react\";\n\nconst UserContext = createContext([]);\n\nexport default UserContext;","import React, { useState, useContext } from \"react\";\nimport User from \"../components/User\";\nimport UserContext from \"../utils/UserContext\";\nimport SearchContext from \"../utils/SearchContext\";\n\nconst UserList = () => {\n  const [users, setUsers] = useContext(UserContext);\n  const [sorted, setSorted] = useState(\"asc\");\n  const [search, setSearch] = useContext(SearchContext);\n  // console.log(users);\n  let userList = filterUsers();\n\n  function filterUsers() {\n    if (search === \"\") {\n      return users;\n    } else {\n      return users.filter((user) => {\n        let first = user.name.first.toLowerCase();\n        let last = user.name.last.toLowerCase();\n        return first.includes(search) || last.includes(search);\n      });\n    }\n  }\n\n  function sortName(e) {\n    e.preventDefault()\n    if (sorted === \"asc\") {\n      userList.sort((a, b) => {\n        if (a.name.first < b.name.first) {\n          return -1;\n        }\n        if (a.name.first > b.name.first) {\n          return 1;\n        }\n        setSorted(\"desc\");\n        return 0;\n      });\n    } else {\n      userList.sort((a, b) => {\n        if (a.name.first > b.name.first) {\n          return -1;\n        }\n        if (a.name.first < b.name.first) {\n          return 1;\n        }\n        setSorted(\"asc\");\n        return 0;\n      });\n    }\n  }\n\n  return (\n    <main>\n      <div className=\"container\">\n        <div className=\"row\">\n          <table class=\"highlight user-list\">\n            <thead>\n              <tr>\n                <th onClick={sortName}>Name</th>\n                <th>Username</th>\n                <th>Phone</th>\n                <th>Email</th>\n              </tr>\n            </thead>\n            <tbody>\n              {userList.map((user, i) => {\n                return (\n                  <User\n                    key={i}\n                    first={user.name.first}\n                    last={user.name.last}\n                    username={user.login.username}\n                    phone={user.phone}\n                    email={user.email}\n                  />\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default UserList;\n","import React, {useState, useEffect} from \"react\";\nimport \"./App.css\";\nimport API from './utils/API';\nimport Navbar from \"./components/Navbar\";\nimport SearchBar from \"./components/SearchBar\";\nimport Footer from \"./components/Footer.js\";\nimport UserList from \"./pages/UserList\";\nimport UserContext from \"./utils/UserContext\";\nimport SearchContext from \"./utils/SearchContext\";\n\n\nfunction App() {\n  const [users, setUsers] = useState([]);\n  const [search, setSearch] = useState('');\n\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  function loadUsers() {\n    API.getUsers().then(res => { \n      setUsers(res.data.results)\n    })\n  }\n\n  return (\n    <UserContext.Provider value={[users, setUsers]}>\n      <SearchContext.Provider value={[search, setSearch]}>\n        <div className=\"app\">\n          <Navbar />\n          <SearchBar />\n          <UserList />\n          <Footer />\n        </div>\n      </SearchContext.Provider>\n    </UserContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'materialize-css/dist/css/materialize.min.css'\nimport 'materialize-css/dist/js/materialize.min.js'\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}